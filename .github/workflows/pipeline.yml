# The name of the workflow.
name: Bookstore CI/CD

# Define when the workflow should run (on push to main branch).
on:
  push:
    branches:
      - main

# Define jobs for the workflow.
jobs:
  # Build job to install dependencies and build both client and server apps
  build:
    # Strategy for matrix builds with different Node.js versions
    strategy:
      matrix:
        node_version: [23]

    # Set the operating system for the job.
    runs-on: ubuntu-latest

    # Define steps to be executed as part of the job.
    steps:
      # Checkout the code from the GitHub repository.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install Node.js and npm.
      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}

      # Install dependencies and build the client application.
      - name: Install Dependencies and Build Client
        working-directory: ./client
        run: |
          npm install
          npm run build

      # Install dependencies and build the server application.
      - name: Install Dependencies and Build Server
        working-directory: ./api
        run: |
          npm install

  # Deploy job to build and push Docker images to Docker Hub
  docker-deploy:
    # Define dependencies on the build job
    needs: [build]

    # Set the operating system for the job.
    runs-on: ubuntu-latest

    # Define steps to be executed as part of the job.
    steps:
      # Checkout the code from the GitHub repository.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Build Client Docker Image
      - name: Build Client Docker Image
        working-directory: ./client
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bookstore:client-${{github.run_number}} .

      # Build Server Docker Image
      - name: Build Server Docker Image
        working-directory: ./api
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bookstore:api-${{github.run_number}} .

      # Docker Hub Login to authenticate before pushing images
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push Docker Images to Docker Hub
      - name: Push Docker Images To Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/bookstore:client-${{github.run_number}}
          docker push ${{ secrets.DOCKER_USERNAME }}/bookstore:api-${{github.run_number}}

  # Terraform job for infrastructure deployment in Terraform Cloud
  infra-deploy:
    # Define dependencies on the docker-deploy job
    needs: [docker-deploy]
    runs-on: ubuntu-latest

    # Define steps to be executed as part of the job.
    steps:
      # Checkout the code from the GitHub repository.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Terraform CLI with Terraform Cloud integration
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      # Format check for Terraform files
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform
        continue-on-error: true

      # Initialize Terraform to download providers and set up the backend
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Run Terraform Plan to see changes that will be applied
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Apply the Terraform Plan to deploy infrastructure
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLOUD_TOKEN: ${{ secrets.TF_CLOUD_TOKEN }}
        with:
          args: |
            -var='docker_username=${{ secrets.DOCKER_USERNAME }}'
            -var='docker_password=${{ secrets.DOCKER_PASSWORD }}'
            -var='github_run_number=${{ github.run_number }}'
